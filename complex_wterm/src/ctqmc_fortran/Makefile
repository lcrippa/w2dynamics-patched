FPP:=gfortran -cpp -E -P

all: \
	double/Operator.F90 zcomplex/Operator.F90 \
	double/Psi.F90 zcomplex/Psi.F90 \
	double/Bath.F90 zcomplex/Bath.F90 \
	double/UpdatableMatrix.F90 zcomplex/UpdatableMatrix.F90 \
	double/BlockMatrix.F90 zcomplex/BlockMatrix.F90 \
	double/Accumulator.F90 zcomplex/Accumulator.F90 \
	double/Sampler.F90 zcomplex/Sampler.F90 \
	double/Hybridization.F90 zcomplex/Hybridization.F90 \
	double/ExtRange.F90 zcomplex/ExtRange.F90 \
	integer/Buffer.F90 double/Buffer.F90 zcomplex/Buffer.F90 \
	double/Impurity.F90 zcomplex/Impurity.F90 \
	double/QRDecomposition.F90 zcomplex/QRDecomposition.F90 \
	integer/Sorting.F90 double/Sorting.F90

remove-mods:
	find . -name '*.mod' -print0 | xargs -r0 rm --

### new templates

GENERATED_HEADER := "%s\n%s\n%s\n" \
	"! === DO NOT EDIT THIS FILE! ===" \
	"! It is automatically generated from the corresponding .tmpl.F90 file" \
	"! during the build process."

TEMPLATE_INTEGER := \
	-DVALUE_IS_INTEGER \
	-DVALUE_TYPE="integer" \
	-DMBUFFER=MBufferI \
	-DMSORTING=MSortingI

TEMPLATE_DOUBLE := \
	-DREAL_KIND="c_double" \
	-DVALUE_TYPE="real(c_double)" \
	-DREAL_TYPE="real(c_double)" \
	-DCOMPLEX_TYPE="complex(c_double_complex)" \
	-DMSORTING=MSortingD \
	-DMACCUMULATOR=MAccumulatorD \
	-DACCUMULATOR=DAccumulator \
	-DMSAMPLER=MSamplerD \
	-DSAMPLE_POINT=DSamplePoint \
	-DSAMPLE_BUFFER=DSampleBuffer \
	-DSAMPLER=DSampler \
	-DSAMPLE_POINT_2D=DSamplePoint2D \
	-DSAMPLE_BUFFER_2D=DSampleBuffer2D \
	-DSAMPLER_2D=DSampler2D \
	-DSAMPLE_POINT_3D=DSamplePoint3D \
	-DSAMPLE_BUFFER_3D=DSampleBuffer3D \
	-DSAMPLER_3D=DSampler3D \
	-DMEXT_RANGE=MExtRangeD \
	-DEXT_RANGE=DExtRange \
	-DMBUFFER=MBufferD \
	-DMQR_DECOMPOSITION=MQRDecompositionD \
	-DPLANE_ROTATION=DPlaneRotation \
	-DMUPDATABLE_MATRIX=MUpdatableMatrixD \
	-DUPDATABLE_MATRIX=DUpdatableMatrix \
	-DMATRIX_UPDATE_BASE=DMatrixUpdateBase \
	-DMATRIX_REPLACE=DMatrixReplace \
	-DMATRIX_GROW=DMatrixGrow \
	-DMATRIX_SHRINK=DMatrixShrink \
	-DLOW_RANK_UPDATE=DLowRankUpdate \
	-DREPLACE_ROWS=DReplaceRows \
	-DREPLACE_COLS=DReplaceCols \
	-DMATRIX_PERMUTE=DMatrixPermute \
	-DMBLOCK_MATRIX=MBlockMatrixD \
	-DBLOCK_MATRIX=DBlockMatrix \
	-DBLOCK_UPDATE_BASE=DBlockUpdateBase \
	-DBLOCK_REPLACE=DBlockReplace \
	-DBLOCK_GROW=DBlockGrow \
	-DBLOCK_SHRINK=DBlockShrink \
	-DBLOCK_REPLACE_ROWS=DBlockReplaceRows \
	-DBLOCK_REPLACE_COLS=DBlockReplaceCols \
	-DBLOCK_PERMUTE=DBlockPermute \
	-DMHYBRIDIZATION=MHybridizationD \
	-DHYBRIDIZATION=DHybridization \
	-DMBATH=DMBath \
	-DBATH_TYPE=DTBath \
	-DBATH_MOVE_BASE=DTBathMoveBase \
	-DBATH_MOVE=DTBathMove \
	-DBATH_ADD_MOVE=DTBathAddMove \
	-DBATH_REM_MOVE=DTBathRemMove \
	-DBATH_REPLACE_MOVE=DTBathReplaceMove \
	-DBATH_SHIFT_MOVE=DTBathShiftMove \
	-DMOPERATOR=DMOperator \
	-DOPERATOR=DTOperator \
	-DOPER_EIGEN=DOperEigen \
	-DMLOCAL_NUMERICS=MLocalNumericsD \
	-DSTATE_VECTOR=DTStateVector \
	-DKET=DTKet \
	-DBRA=DTBra \
	-DPSICOMP=dOp \
	-DPSIS=DTPsis \
	-DMPSI=MPsiD \
	-DMIMPURITY=MImpurityD \
	-DIMPURITY=DImpurity \
	-DIMPURITY_UPDATE_BASE=DImpurityUpdateBase \
	-DIMPURITY_REPLACE=DImpurityReplace \
	-DIMPURITY_GROW=DImpurityGrow \
	-DIMPURITY_SHRINK=DImpurityShrink \
	-DIMPURITY_SHIFT=DImpurityShift \
	-DIMPURITY_PERMUTE=DImpurityPermute \
	-DIMPURITY_UPDATE=DImpurityUpdate \
	-DDOTC=DDOT \
	-DGEMM=DGEMM \
	-DGERU=DGER \
	-DROT=DROT \
	-DGETRF=DGETRF \
	-DGETRI=DGETRI \
	-DGETC2=DGETC2 \
	-DGEQP3X=DGEQP3X \
	-DLANGE=DLANGE \
	-DHEEV=DHEEV \
	-DGEQRF=DGEQRF \
	-DUNGQR=DORGQR \
	-DTRTRS=DTRTRS \
	-DLARTG=DLARTG

TEMPLATE_ZCOMPLEX := \
    -DVALUE_IS_COMPLEX \
	-DREAL_KIND="c_double" \
	-DVALUE_TYPE="complex(c_double_complex)" \
	-DREAL_TYPE="real(c_double)" \
	-DCOMPLEX_TYPE="complex(c_double_complex)" \
	-DMSORTING=MSortingZ \
	-DMACCUMULATOR=MAccumulatorZ \
	-DACCUMULATOR=ZAccumulator \
	-DMSAMPLER=MSamplerZ \
	-DSAMPLE_POINT=ZSamplePoint \
	-DSAMPLE_BUFFER=ZSampleBuffer \
	-DSAMPLER=ZSampler \
	-DSAMPLE_POINT_2D=ZSamplePoint2D \
	-DSAMPLE_BUFFER_2D=ZSampleBuffer2D \
	-DSAMPLER_2D=ZSampler2D \
	-DSAMPLE_POINT_3D=ZSamplePoint3D \
	-DSAMPLE_BUFFER_3D=ZSampleBuffer3D \
	-DSAMPLER_3D=ZSampler3D \
	-DMEXT_RANGE=MExtRangeZ \
	-DEXT_RANGE=ZExtRange \
	-DMBUFFER=MBufferZ \
	-DMQR_DECOMPOSITION=MQRDecompositionZ \
	-DPLANE_ROTATION=ZPlaneRotation \
	-DMUPDATABLE_MATRIX=MUpdatableMatrixZ \
	-DUPDATABLE_MATRIX=ZUpdatableMatrix \
	-DMATRIX_UPDATE_BASE=ZMatrixUpdateBase \
	-DMATRIX_REPLACE=ZMatrixReplace \
	-DMATRIX_GROW=ZMatrixGrow \
	-DMATRIX_SHRINK=ZMatrixShrink \
	-DLOW_RANK_UPDATE=ZLowRankUpdate \
	-DREPLACE_ROWS=ZReplaceRows \
	-DREPLACE_COLS=ZReplaceCols \
	-DMATRIX_PERMUTE=ZMatrixPermute \
	-DMBLOCK_MATRIX=MBlockMatrixZ \
	-DBLOCK_MATRIX=ZBlockMatrix \
	-DBLOCK_UPDATE_BASE=ZBlockUpdateBase \
	-DBLOCK_REPLACE=ZBlockReplace \
	-DBLOCK_GROW=ZBlockGrow \
	-DBLOCK_SHRINK=ZBlockShrink \
	-DBLOCK_REPLACE_ROWS=ZBlockReplaceRows \
	-DBLOCK_REPLACE_COLS=ZBlockReplaceCols \
	-DBLOCK_PERMUTE=ZBlockPermute \
	-DMHYBRIDIZATION=MHybridizationZ \
	-DHYBRIDIZATION=ZHybridization \
	-DMBATH=ZMBath \
	-DBATH_TYPE=ZTBath \
	-DBATH_MOVE=ZTBathMove \
	-DBATH_MOVE_BASE=ZTBathMoveBase \
	-DBATH_ADD_MOVE=ZTBathAddMove \
	-DBATH_REM_MOVE=ZTBathRemMove \
	-DBATH_REPLACE_MOVE=ZTBathReplaceMove \
	-DBATH_SHIFT_MOVE=ZTBathShiftMove \
	-DMOPERATOR=ZMOperator \
	-DOPERATOR=ZTOperator \
	-DOPER_EIGEN=ZOperEigen \
	-DMLOCAL_NUMERICS=MLocalNumericsZ \
	-DSTATE_VECTOR=ZTStateVector \
	-DKET=ZTKet \
	-DBRA=ZTBra \
	-DPSICOMP=zOp \
	-DPSIS=ZTPsis \
	-DMPSI=MPsiZ \
	-DMIMPURITY=MImpurityZ \
	-DIMPURITY=ZImpurity \
	-DIMPURITY_UPDATE_BASE=ZImpurityUpdateBase \
	-DIMPURITY_REPLACE=ZImpurityReplace \
	-DIMPURITY_GROW=ZImpurityGrow \
	-DIMPURITY_SHRINK=ZImpurityShrink \
	-DIMPURITY_SHIFT=ZImpurityShift \
	-DIMPURITY_PERMUTE=ZImpurityPermute \
	-DIMPURITY_UPDATE=ZImpurityUpdate \
	-DDOTC=ZDOTC \
	-DGEMM=ZGEMM \
	-DGERU=ZGERU \
	-DROT=ZROT \
	-DGETRF=ZGETRF \
	-DGETRI=ZGETRI \
	-DGETC2=ZGETC2 \
	-DGEQP3X=ZGEQP3X \
	-DLANGE=ZLANGE \
	-DHEEV=ZHEEV \
	-DGEQRF=ZGEQRF \
	-DUNGQR=ZUNGQR \
	-DTRTRS=ZTRTRS \
	-DLARTG=ZLARTG


integer/%.F90: %.tmpl.F90
	@printf $(GENERATED_HEADER) > $@
	$(FPP) $(TEMPLATE_INTEGER) $< >> $@

double/%.F90: %.tmpl.F90
	@printf $(GENERATED_HEADER) > $@
	$(FPP) $(TEMPLATE_DOUBLE) $< >> $@

zcomplex/%.F90: %.tmpl.F90
	@printf $(GENERATED_HEADER) > $@
	$(FPP) $(TEMPLATE_ZCOMPLEX) $< >> $@
